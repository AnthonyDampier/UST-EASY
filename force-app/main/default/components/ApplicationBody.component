<apex:component>
    <apex:attribute name="title" description="The title for this page" type="String" required="true"/>
    <apex:attribute name="subtitle" description="The subtitle for this page" type="String" required="false"/>
    <apex:attribute name="hideLogo" description="Should the logo be hidden" type="Boolean" required="false"/>
    <apex:attribute name="appControl" description="ApplicationSettings" type="Application_Control__c" required="true"/>
    <apex:attribute name="loadingText" description="The text to display when save is occuring" type="String" required="false" default="Processing..."/>
    <script>
        function appShowLoadingSpinner() {
            jQuery('#apploadingspinner').show();
        }

        function appHideLoadingSpinner() {
            jQuery('#apploadingspinner').hide();
        }

        function appShowConfimation() {
            jQuery('#confirmation').show();
        }

        // By default, replaceAll runs on ALL textarea fields.
        // modified to run only on the class defined 'ckeditor'
        //CKEDITOR.replaceAll = function(){for(var a=document.getElementsByClassName("ckeditor"),b=0;b<a.length;b++){var d=null,k=a[b];if(k.name||k.id){if("string"==typeof arguments[0]){if(!(new RegExp("(?:^|\\s)"+arguments[0]+"(?:$|\\s)")).test(k.className))continue}else if("function"==typeof arguments[0]&&(d={},!1===arguments[0](k,d)))continue;this.replace(k,d)}}};

        // destroys and rebuilds the rich text fields after rerender
        function afterRerenderRTF() {
            for (name in CKEDITOR.instances) {
                delete CKEDITOR.instances[name];
            }

            CKEDITOR.replaceAll('ckeditor');
        }

        // I use this before save as I've observed situations where changes are lost, 
        // particularly after the fields have already been rerendered. 
        // More of a safeguard than anything
        function ensureRichTextContent() {
            jQuery('.ckeditor').each(function (index, el) {
                var id = jQuery(el).attr('id') || jQuery(el).attr('name');
                var data = CKEDITOR.instances[id].getData().trim();

                if (CKEDITOR.instances[id].checkDirty())
                    jQuery(el).text(data);
            });
        }

        function performDocUploadSave(redirectTo) {
            var docUploadPromiseArr = [];
            ensureRichTextContent();
            jQuery('.docUploadInput').each(function (idx, docUpload) {
                if (docUpload.files) {
                    var fbody = docUpload.files[0];
                    if (fbody) {
                        docUploadPromiseArr.push(getAsText(fbody, jQuery(docUpload).attr('data-respid')));
                    }
                } else {
                }
            });
            Promise.all(docUploadPromiseArr).then(docUploads => {
                var docUploadObj = {};
                docUploads.forEach(function (docUpload) {
                    docUploadObj[docUpload.itemId] = {"attData": docUpload};
                });
                saveWithDocs(JSON.stringify(docUploadObj), redirectTo);
                console.log(redirectTo);
            }).catch(function () {
            });
        }

        function getAsText(readFile, respId) {
            return new Promise((resolve, reject) => {
                var reader = new FileReader();
                var reader = new FileReader();
                reader.onload = (function (theFile) {
                    var fileName = theFile.name;
                    return function (e) {
                        resolve({"fileName": fileName, "data": e.target.result, "itemId": respId});
                    };
                })(readFile);
                reader.readAsDataURL(readFile);
            });
        }
    </script>
    <div style="display:none" id="apploadingspinner">
        <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; opacity: 0.75; z-index: 1000; background-color: black;">
            &nbsp;
        </div>
        <div style="position: fixed; width: 100%; top: 50%; z-index: 1001;font-size:30px;">
            <center><span class='glyphicon glyphicon-refresh spinning'></span> {!loadingText}</center>
        </div>
    </div>
    <div style="display:none" id="confirmation">
        <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; opacity: 0.75; z-index: 1002; background-color: black;">
            &nbsp;
        </div>
        <div style="position: fixed; top: 50%; width: 100%; z-index: 1003;font-size:30px; color:white;">
            <center>Thank you! Your response has been submitted successfully.</center>
        </div>
    </div>
    <div class="container-fluid">
        <!--            <apex:outputPanel styleClass="row" style="padding:10px;padding-left:15px;" rendered="{!!hideLogo}">-->
        <!--                <div class="col-xs-12" >-->
        <!--                    <img src="{!URLFOR($Resource[appControl.Logo_Static_Resource__c], appControl.Logo_Static_Resource_Path__c)}" />-->
        <!--                </div>-->
        <!--            </apex:outputPanel>-->
        <div class="slds-col slds-size_1-of-1 slds-large-size_12-of-12 slds-p-bottom_small">
            <h2 class="slds-text-heading_large">{!title}</h2>
        </div>
        <apex:outputPanel rendered="{!subtitle != null}">
            <div class="slds-col slds-size_1-of-1 slds-large-size_12-of-12 slds-p-bottom_small">
                <h3 class="slds-text-heading_medium">{!subtitle}</h3>
            </div>
        </apex:outputPanel>
        <apex:componentBody/>
    </div>
</apex:component>